buildscript {
    ext.kotlin_version = project.kotlin_version
    repositories {
        mavenCentral()
        maven { url = "http://files.minecraftforge.net/maven" }
        maven { url = "http://repo.maven.apache.org/maven2" }
        maven { url = "https://oss.sonatype.org/content/repositories/snapshots/" }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.2-SNAPSHOT'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:${project.kotlin_version}"
    }
}
apply plugin: "net.minecraftforge.gradle.forge"
apply plugin: 'kotlin'
apply plugin: "maven-publish"
apply plugin: "maven"

archivesBaseName = project.mod_name.replace(' ', '-').toLowerCase()
group = "net.ndrei"

version = "${project.minecraft_version}-${project.mod_version}"
if (project.hasProperty('mod_suffix')) {
    version += "-${project.mod_suffix}"
}

compileJava { sourceCompatibility = targetCompatibility = "1.8" }
compileKotlin { kotlinOptions { jvmTarget = "1.8" } }

minecraft {
    version = "${project.minecraft_version}-${project.forge_version}"
    mappings = "${project.mcp_version}"
    runDir = "run"

    // "stolen" from: UpcraftLP
    def username = "${mod_name}"
    if (project.hasProperty('dev_mail')) {
        username = "${project.dev_mail}"
    }
    clientRunArgs += "--username=${username}"
//    if (project.hasProperty('dev_password')) {
//        clientRunArgs += " --password=${project.dev_password}"
//    }
//     serverRunArgs += "nogui"
    // end of "stolen" part :)

    replace '@MOD-ID@', project.mod_id
    replace '@MOD-NAME@', project.mod_name
    replace '@MOD-VERSION@', project.mod_version
    replace '@MOD-MC-VERSION@', project.minecraft_version
    replace '@FORGELIN-VERSION@', project.forgelin_version
    replace '@FORGE-VERSION@', project.forge_version
    replace '@BC-VERSION@', project.bc_version
    replace '@JEI-VERSION@', project.jei_version

    replaceIn 'constants.kt'
}

// Mad hacks to make source replacements work for Kotlin
// "stolen" from: https://github.com/PaleoCrafter/VanillaImmersion/blob/ee82ecafb76659cf7d7822a722c8f63f43f41d01/build.gradle#L119-L136
import net.minecraftforge.gradle.user.TaskSourceCopy
for (set in sourceSets) {
    def taskName = "source${set.name.capitalize()}Kotlin"
    def dir = new File(project.getBuildDir(), "sources/${set.name}/kotlin")
    task(taskName, type: TaskSourceCopy) {
        source = set.getKotlin()
        output = dir
    }
    def compileTask = tasks[set.getCompileTaskName("kotlin")]
    compileTask.source = dir
    compileTask.dependsOn taskName
    def dirPath = dir.toPath()
    // compileKotlin.include {
    compileTask.include {
        return it.file.toPath().startsWith(dirPath)
    }
}
// end of "stolen" part :)

configurations {
    compile.extendsFrom exportedCompile
    deployerJars

    all { resolutionStrategy.cacheChangingModulesFor 0, 'seconds' }
}

repositories {
    mavenCentral()
    jcenter()
    maven { name='forgelin'; url='http://maven.shadowfacts.net' }
    maven { name='build craft'; url='https://www.mod-buildcraft.com/maven' }
    maven { name='jei'; url='http://dvs1.progwml6.com/files/maven' }
    maven { name 'craft tweaker'; url='http://maven.blamejared.com' }
}

dependencies {
    deployerJars 'org.apache.maven.wagon:wagon-ftp:2.2'
    compileOnly "org.jetbrains.kotlin:kotlin-stdlib-jre8:${project.kotlin_version}"
    compile "net.shadowfacts:Forgelin:${project.forgelin_version}"

    deobfCompile "mezz.jei:jei_${project.minecraft_version}:${project.jei_version}:api"
    runtime "mezz.jei:jei_${project.minecraft_version}:${project.jei_version}"

//    hopefully these will be available once released for 1.12
    if (file("bc-lib/buildcraft-${project.bc_version}.jar").exists() &&
            file("bc-lib/buildcraft-${project.bc_version}-dev.jar").exists()) {
        compileOnly files("bc-lib/buildcraft-${project.bc_version}-dev.jar")
        runtime files("bc-lib/buildcraft-${project.bc_version}.jar")
    }
    else {
        compileOnly "com.mod-buildcraft:buildcraft-api:${project.bc_version}"
        compileOnly "com.mod-buildcraft:buildcraft-lib:${project.bc_version}"
        runtime "com.mod-buildcraft:buildcraft:${project.bc_version}"
        // compileOnly files("lib/buildcraft-api-${project.bc_version}.jar")
    }
}

processResources {
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version
    inputs.property "modid", project.mod_id
    inputs.property "modname", project.mod_name

    from(sourceSets.main.resources.srcDirs) {
        include '**/*.info'
        include '**/*.properties'

        // replace version and mcversion
        expand 'version':project.version, 'mcversion':project.minecraft.version, 'modid': project.mod_id, 'modname': project.mod_name
    }

    from(sourceSets.main.resources.srcDirs) {
        exclude '**/*.info'
        exclude '**/*.properties'
    }
}

jar {
    from sourceSets.main.output
    from sourceSets.api.output
}

task sourcesJar(type: Jar) {
    from sourceSets.api.allSource
    from sourceSets.main.allSource
    classifier = 'sources'
}

task deobfJar(type: Jar) {
    from sourceSets.main.output
    classifier = 'deobf'
}

task apiJar(type: Jar) {
    from sourceSets.api.output
    classifier = 'api'
}

artifacts {
    archives apiJar, sourceJar, deobfJar
}

if (project.hasProperty('mavenFTPServer') && project.hasProperty('mavenFTPUser') && project.hasProperty('mavenFTPPassword')) {
    uploadArchives {
        repositories.mavenDeployer {
            dependsOn build, apiJar, deobfJar, sourcesJar

            configuration = configurations.deployerJars
            repository(url: project.mavenFTPServer) {
                authentication(userName: project.mavenFTPUser, password: mavenFTPPassword)
            }
        }
    }
    uploadArchives.dependsOn build, apiJar, sourcesJar, deobfJar
}
